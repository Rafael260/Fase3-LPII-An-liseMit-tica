/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fase3;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author EliseuMedeiros;RafaelOliveira
 * @version 13/11/2015 - 11:55
 */
public class JImageFrame extends javax.swing.JFrame {

    /**
     * Creates new form JImageFrame
     */
    
    public JImageFrame() {
        initComponents();
        projetoAberto = false;
        arquivo = new Arquivo();
        segmentacao = new Segmentacao();
        anotacao = new Anotacao();
        busca = new Busca();
        listaModelsAnotacao = new ListaModels();
        listaModelsBusca = new ListaModels();
        regioesSelecionadas = new ArrayList<>();
        //Valores de parâmetros inicializados com valores default
        //jScrollPane3.setVisible(false);
        listInstantSearch.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jTabbedPaneSegmentacao = new javax.swing.JTabbedPane();
        jPanelSelecSegmentacao = new javax.swing.JPanel();
        jButtonSegmt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        colorRadius = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        minSize = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        blurLevel = new javax.swing.JTextField();
        jSliderBlurLevel = new javax.swing.JSlider();
        jSliderColorRadius = new javax.swing.JSlider();
        jSliderMinSize = new javax.swing.JSlider();
        jPanelAnotacao = new javax.swing.JPanel();
        novaAnotacao = new javax.swing.JTextField();
        botaoNovaAnotacao = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButtonSalvarComo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaAnotacoes = new javax.swing.JList();
        jToolBar1 = new javax.swing.JToolBar();
        buscaAnotacoes = new javax.swing.JTextField();
        jButtonBuscaAnotacoes = new javax.swing.JButton();
        jButtonRemoverAnotacao = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButtonSalvarAlteracoes = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listInstantSearch = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jPanelAnotacao1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jButtonSalvarNovaImagem = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        regioes = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPaneImagem = new javax.swing.JScrollPane();
        labelSegmentacao = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        labelMapaDeRotulo = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        labelRegioesSeparadas = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemCarregar = new javax.swing.JMenuItem();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jMenuItemSair = new javax.swing.JMenuItem();
        menuAjuda = new javax.swing.JMenu();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTabbedPaneSegmentacao.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        jButtonSegmt.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButtonSegmt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/vetor-quadrados.png"))); // NOI18N
        jButtonSegmt.setText("Segmentar");
        jButtonSegmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSegmtActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Nitidez:");

        colorRadius.setText("50");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Tamanho Mínimo:");

        minSize.setText("100");
        minSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minSizeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Raio de Cor:");

        blurLevel.setText("0.5");
        blurLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurLevelActionPerformed(evt);
            }
        });

        jSliderBlurLevel.setMajorTickSpacing(2);
        jSliderBlurLevel.setMaximum(20);
        jSliderBlurLevel.setMinorTickSpacing(1);
        jSliderBlurLevel.setPaintLabels(true);
        jSliderBlurLevel.setPaintTicks(true);
        jSliderBlurLevel.setSnapToTicks(true);
        jSliderBlurLevel.setToolTipText("");
        jSliderBlurLevel.setValue(5);
        jSliderBlurLevel.setAutoscrolls(true);
        jSliderBlurLevel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSliderBlurLevel.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jSliderBlurLevel.setInheritsPopupMenu(true);
        jSliderBlurLevel.setNextFocusableComponent(blurLevel);
        jSliderBlurLevel.setValueIsAdjusting(true);
        jSliderBlurLevel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSliderBlurLevelFocusGained(evt);
            }
        });
        jSliderBlurLevel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderBlurLevelMouseReleased(evt);
            }
        });

        jSliderColorRadius.setMajorTickSpacing(10);
        jSliderColorRadius.setMinorTickSpacing(5);
        jSliderColorRadius.setPaintLabels(true);
        jSliderColorRadius.setPaintTicks(true);
        jSliderColorRadius.setAutoscrolls(true);
        jSliderColorRadius.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSliderColorRadius.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jSliderColorRadius.setInheritsPopupMenu(true);
        jSliderColorRadius.setNextFocusableComponent(colorRadius);
        jSliderColorRadius.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jSliderColorRadiusMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderColorRadiusMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSliderColorRadiusMouseClicked(evt);
            }
        });

        jSliderMinSize.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jSliderMinSize.setMajorTickSpacing(100);
        jSliderMinSize.setMaximum(1000);
        jSliderMinSize.setMinorTickSpacing(50);
        jSliderMinSize.setPaintLabels(true);
        jSliderMinSize.setPaintTicks(true);
        jSliderMinSize.setValue(100);
        jSliderMinSize.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSliderMinSize.setFocusCycleRoot(true);
        jSliderMinSize.setNextFocusableComponent(minSize);
        jSliderMinSize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jSliderMinSizeMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSelecSegmentacaoLayout = new javax.swing.GroupLayout(jPanelSelecSegmentacao);
        jPanelSelecSegmentacao.setLayout(jPanelSelecSegmentacaoLayout);
        jPanelSelecSegmentacaoLayout.setHorizontalGroup(
            jPanelSelecSegmentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSelecSegmentacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSelecSegmentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSliderBlurLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSliderColorRadius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSliderMinSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelSelecSegmentacaoLayout.createSequentialGroup()
                        .addGroup(jPanelSelecSegmentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelSelecSegmentacaoLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(blurLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelSelecSegmentacaoLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(colorRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelSelecSegmentacaoLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minSize, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(170, Short.MAX_VALUE))))
            .addGroup(jPanelSelecSegmentacaoLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jButtonSegmt, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelSelecSegmentacaoLayout.setVerticalGroup(
            jPanelSelecSegmentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSelecSegmentacaoLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(jPanelSelecSegmentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(blurLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSliderBlurLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(jPanelSelecSegmentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(colorRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSliderColorRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(jPanelSelecSegmentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(minSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSliderMinSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(jButtonSegmt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );

        jTabbedPaneSegmentacao.addTab("Segmentação", jPanelSelecSegmentacao);

        jPanelAnotacao.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        novaAnotacao.setPreferredSize(new java.awt.Dimension(167, 20));
        novaAnotacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novaAnotacaoActionPerformed(evt);
            }
        });
        jPanelAnotacao.add(novaAnotacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 44, -1, -1));

        botaoNovaAnotacao.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        botaoNovaAnotacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/add.png"))); // NOI18N
        botaoNovaAnotacao.setText("Adicionar");
        botaoNovaAnotacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoNovaAnotacaoActionPerformed(evt);
            }
        });
        jPanelAnotacao.add(botaoNovaAnotacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(183, 40, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Adicionar descrição:");
        jPanelAnotacao.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 19, -1, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Regiões descritas:");
        jPanelAnotacao.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 75, -1, -1));

        jButtonSalvarComo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButtonSalvarComo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/save as icon.png"))); // NOI18N
        jButtonSalvarComo.setText("Salvar como");
        jButtonSalvarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarComoActionPerformed(evt);
            }
        });
        jPanelAnotacao.add(jButtonSalvarComo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 484, 191, 36));

        listaAnotacoes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                listaAnotacoesFocusGained(evt);
            }
        });
        listaAnotacoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaAnotacoesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listaAnotacoes);

        jPanelAnotacao.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 96, 276, 198));

        jToolBar1.setBorder(null);
        jToolBar1.setRollover(true);

        buscaAnotacoes.setPreferredSize(new java.awt.Dimension(200, 28));
        buscaAnotacoes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                buscaAnotacoesKeyReleased(evt);
            }
        });
        jToolBar1.add(buscaAnotacoes);

        jButtonBuscaAnotacoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/buscar2.png"))); // NOI18N
        jButtonBuscaAnotacoes.setFocusable(false);
        jButtonBuscaAnotacoes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonBuscaAnotacoes.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonBuscaAnotacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscaAnotacoesActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonBuscaAnotacoes);

        jPanelAnotacao.add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(119, 300, 164, 31));

        jButtonRemoverAnotacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/remover.png"))); // NOI18N
        jButtonRemoverAnotacao.setText("Remover");
        jButtonRemoverAnotacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoverAnotacaoActionPerformed(evt);
            }
        });
        jPanelAnotacao.add(jButtonRemoverAnotacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        jButton1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/abrir_projeto.png"))); // NOI18N
        jButton1.setText("Abrir Projeto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanelAnotacao.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 526, 191, -1));

        jButtonSalvarAlteracoes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonSalvarAlteracoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/save_as.png"))); // NOI18N
        jButtonSalvarAlteracoes.setText("Salvar alterações");
        jButtonSalvarAlteracoes.setEnabled(false);
        jButtonSalvarAlteracoes.setPreferredSize(new java.awt.Dimension(137, 35));
        jButtonSalvarAlteracoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarAlteracoesActionPerformed(evt);
            }
        });
        jPanelAnotacao.add(jButtonSalvarAlteracoes, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 447, 191, 31));

        jScrollPane3.setBorder(null);

        listInstantSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listInstantSearchMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listInstantSearch);

        jPanelAnotacao.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 160, 41));

        jButton2.setText("Remover Seleções");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanelAnotacao.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 120, 30));

        jTabbedPaneSegmentacao.addTab("Anotação", jPanelAnotacao);

        jPanelAnotacao1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane6.setBorder(null);
        jPanelAnotacao1.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 160, 41));

        jButtonSalvarNovaImagem.setText("Salvar nova imagem");
        jButtonSalvarNovaImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarNovaImagemActionPerformed(evt);
            }
        });
        jPanelAnotacao1.add(jButtonSalvarNovaImagem, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 480, 140, 30));

        jTabbedPaneSegmentacao.addTab("Regiões destacadas", jPanelAnotacao1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados"));

        regioes.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        regioes.setText("Regiões:");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(regioes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addContainerGap(496, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regioes)
                    .addComponent(jLabel6))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        labelSegmentacao.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelSegmentacao.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        labelSegmentacao.setAlignmentY(0.0F);
        labelSegmentacao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelSegmentacaoMouseClicked(evt);
            }
        });
        jScrollPaneImagem.setViewportView(labelSegmentacao);

        jTabbedPane1.addTab("Segmentação", jScrollPaneImagem);

        labelMapaDeRotulo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelMapaDeRotulo.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane1.setViewportView(labelMapaDeRotulo);

        jTabbedPane1.addTab("Mapa de Rótulos", jScrollPane1);

        labelRegioesSeparadas.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelRegioesSeparadas.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane4.setViewportView(labelRegioesSeparadas);

        jTabbedPane1.addTab("Regiões separadas", jScrollPane4);

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel10.setFont(new java.awt.Font("Bookman Old Style", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 153));
        jLabel10.setText("M");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("nálise");

        jLabel8.setFont(new java.awt.Font("Bookman Old Style", 1, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/th-celula-animal.png"))); // NOI18N
        jLabel8.setText("A");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("itótica");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel10)
                .addComponent(jLabel11))
            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jMenuBar1.setBackground(new java.awt.Color(144, 147, 141));

        jMenuFile.setText("Arquivo");
        jMenuFile.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jMenuItemCarregar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemCarregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/carregarImagem-icon.png"))); // NOI18N
        jMenuItemCarregar.setText("Carregar imagem");
        jMenuItemCarregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCarregarActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemCarregar);

        jRadioButtonMenuItem1.setText("Abrir projeto");
        jRadioButtonMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/abrir_projeto.png"))); // NOI18N
        jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem1ActionPerformed(evt);
            }
        });
        jMenuFile.add(jRadioButtonMenuItem1);

        jMenuItemSair.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/sair.png"))); // NOI18N
        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSair);

        jMenuBar1.add(jMenuFile);

        menuAjuda.setText("Ajuda");
        menuAjuda.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuBar1.add(menuAjuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPaneSegmentacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 11, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTabbedPaneSegmentacao, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void minSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minSizeActionPerformed
        // TODO add your handling code here:             
    }//GEN-LAST:event_minSizeActionPerformed

    /**
     * Função para tratar clique do botão "Segmentar"
     * Usará os parâmetros inseridos pelo usuário para segmentar a imagem carregada
     * @param evt 
     */
    private void jButtonSegmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSegmtActionPerformed
        //Esvazia as anotações de uma possível imagem anterior
        anotacao.esvaziarHash();
        //Esvazia as anotações da lista
        listaModelsAnotacao.clearListaModels();
        //listaAnotacoes.setModel(listaModelsAnotacao.getListaModels());
        
        double local_blur_Level;
        double local_color_Radius;
        double local_min_Size;
        //Se a imagem não foi carregada, não faz nada
        if (segmentacao.getEndereco() == null){
            JOptionPane.showMessageDialog(rootPane, "Imagem não carregada!");            
            return;
        }
        //Vários try catch para verificar o que o usuário digitou e se é válido para os parâmetros
        //Valores default são usados caso haja alguma irregularidade
        try{
            local_blur_Level = getDouble(blurLevel.getText());
        }catch(IllegalArgumentException e){
            local_blur_Level = Segmentacao.getDefaultBlurLevel();
        }
        try{
            local_color_Radius = getDouble(colorRadius.getText());
        }catch(IllegalArgumentException e){
            local_color_Radius = Segmentacao.getDefaultColorRadius();
        }
        try{
            local_min_Size = getDouble(minSize.getText());
        }catch(IllegalArgumentException e){
            local_min_Size = Segmentacao.getDefaultMinSize();
        }
        //Se a imagem não foi segmentada ainda, ou se os parâmetros foram alterados, deve segmentar a imagem
        if (segmentacao.estaModificado(local_blur_Level,local_color_Radius,local_min_Size) || segmentacao.getImagem() == null){
            segmentacao.segmentarImagem();
            jLabel6.setText(Integer.toString(segmentacao.getNumeroDeRegioes()));
        }
        
        labelSegmentacao.setIcon(new ImageIcon(segmentacao.getImagemSegmentada()));
        labelMapaDeRotulo.setIcon(new ImageIcon(segmentacao.getImagemMapaRotulo()));
        labelRegioesSeparadas.setIcon(null);
    }//GEN-LAST:event_jButtonSegmtActionPerformed

    /**
     * Carrega o arquivo para o programa. Se não for imagem, uma mensagem de erro aparece
     * @param evt 
     */
    private void jMenuItemCarregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCarregarActionPerformed
         // TODO add your handling code here:
        chooserOpen = new JFileChooser();
        //Se não carregou o arquivo, não tem o que fazer
        if (chooserOpen.showOpenDialog(null) != JFileChooser.APPROVE_OPTION){
            return;
        }
        
        //Testa a extensão do arquivo carregado, se não for imagem, não continua
        if (!segmentacao.ehImagem(chooserOpen.getSelectedFile().toString())){
            JOptionPane.showMessageDialog(rootPane, "Você precisa carregar uma imagem JPG.");
            return;
        }
        projetoAberto = false;
        //Insere a imagem no label da esquerda do programa
        labelSegmentacao.setIcon(new ImageIcon(chooserOpen.getSelectedFile().toString()));
        //Limpa o label de mapa de rótulo
        labelMapaDeRotulo.setIcon(null);
        //Limpa a instancia de imagem, para carregar corretamente a nova
        segmentacao.resetaImagem();
        //Limpa as seleções anteriores
        regioesSelecionadas.clear();
        //Esvazia as anotações de uma possível imagem anterior
        anotacao.esvaziarHash();
        //Limpa as anotações de uma possível imagem anterior
        listaModelsAnotacao.clearListaModels();
        listaAnotacoes.setModel(listaModelsAnotacao.getListaModels());
        
        //Salva o endereço da imagem
        segmentacao.setEndereco(chooserOpen.getSelectedFile().toString());           
        //Zera a contagem do número de regiões, para fazer a contgem da imagem carregada
        jLabel6.setText("0");
        //desativa o botão de salvar alterações
        jButtonSalvarAlteracoes.setEnabled(false);
        
        labelRegioesSeparadas.setIcon(null);
    }//GEN-LAST:event_jMenuItemCarregarActionPerformed

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItemSairActionPerformed
    /**
     * Seleciona ou tira seleção de regiões da imagem para anotação
     * @param evt 
     */
    private void labelSegmentacaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSegmentacaoMouseClicked
        //Se o usuário clicou numa região do label que não tenha imagem, retira a seleção da lista de anotações
        //e tira as seleções de região
        if (segmentacao.estaSegmentada() && !segmentacao.estaNoIntervalo(evt.getX(), evt.getY())){
            listaAnotacoes.clearSelection();
            listInstantSearch.clearSelection();
            regioesSelecionadas.clear();
            labelSegmentacao.setIcon(new ImageIcon (segmentacao.getImagemSegmentada()));
        }

        //Se não tiver imagem, ou não segmentou ainda, ou o clique não foi na imagem, não há mais o que fazer
        if (segmentacao.getEndereco() == null || !segmentacao.estaSegmentada() || !segmentacao.estaNoIntervalo(evt.getX(), evt.getY()))
            return;
        
        BufferedImage novaImagem;
        BufferedImage imagemSegmentada = segmentacao.getImagemSegmentada();
        //Pega o indice do vetor correspondente à posição x,y da imagem
        int indiceDoVetor = segmentacao.getIndiceDeVetor(evt.getX(), evt.getY());
        //Pega o vetor de mapeamento da imagem [0-N]
        int [] mapaDeRegioes = segmentacao.getMapaDeRegioes();
        //Pega o número da região clicada
        int numRegiaoClicada = mapaDeRegioes[indiceDoVetor];
        //Se a região não foi clicada ainda, adiciona na lista de regioes
        if(!regioesSelecionadas.contains(numRegiaoClicada))
            regioesSelecionadas.add(numRegiaoClicada);
        else{
            //Senao, é porque o usuário quer tirar a seleção da região
            regioesSelecionadas.remove(new Integer(numRegiaoClicada));
        }
        //se não houverem regiões selecionadas, recoloca-se a imagem segmentada.
        if(regioesSelecionadas.isEmpty()){
            labelSegmentacao.setIcon(new ImageIcon (imagemSegmentada));
            return;
        }
        //Pega a imagem com o destaque das regiões clicadas
        novaImagem = anotacao.getMapaImagemNovoBrilho(segmentacao, regioesSelecionadas,false);
        //Coloca a imagem na tela
        labelSegmentacao.setIcon(new ImageIcon(novaImagem));
    }//GEN-LAST:event_labelSegmentacaoMouseClicked

    private void novaAnotacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novaAnotacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_novaAnotacaoActionPerformed

    /**
     * Grava uma nova anotação na hash e exibe a lista de anotações existentes
     * @param evt 
     */
    private void botaoNovaAnotacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoNovaAnotacaoActionPerformed
        if (regioesSelecionadas.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Selecione ao menos uma região para anotar.");
            return;
        }
       //Pega o texto digitado para gravar a nova anotação
        String descricao = novaAnotacao.getText();
        //Caso o usuário clicou sem ter escrito, não faz nada
        if (descricao.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Adicione uma descrição para anotar.");
            return;
        }
        //Anota as regiões selecionadas
        anotacao.anotarRegiao(descricao, regioesSelecionadas);
        //Coloca a imagem segmentada na tela
        labelSegmentacao.setIcon(new ImageIcon (segmentacao.getImagemSegmentada()));
        
        if (!listaModelsAnotacao.contains(descricao)){
            listaModelsAnotacao.addListaModels(descricao);
        }
            novaAnotacao.setText(null);
        if(projetoAberto){
            jButtonSalvarAlteracoes.setEnabled(true);
        }
        imagemComRegioes = anotacao.getImagemComRegioesAnotadas(segmentacao);
        labelRegioesSeparadas.setIcon(new ImageIcon(imagemComRegioes));
    }//GEN-LAST:event_botaoNovaAnotacaoActionPerformed

    /**
     * Grava o endereço da imagem, parâmetros de segmentação e hash de regiões e descrições em txt
     * @param evt 
     */
    private void jButtonSalvarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarComoActionPerformed
         // TODO add your handling code here:
                   //Testa a extensão do arquivo carregado, se não for imagem, não continua
        if (anotacao.getHashRegioes().isEmpty() ){
            JOptionPane.showMessageDialog(rootPane, "Você tem que fazer alguma anotação.");
            return;
        }
        chooserSave = new JFileChooser();
        //Se não carregou o arquivo, não faz nada
        if (chooserSave.showSaveDialog(null) != JFileChooser.APPROVE_OPTION){
            return;
        }
        projetoAberto = true;
        ArrayList<String> salvarArq = new ArrayList<>();
        String caminhoArq = chooserSave.getSelectedFile().toString();
        String aux = blurLevel.getText() +  "\t" + colorRadius.getText() + "\t" + minSize.getText();
        //Adiciona o endereço da imagem na primeira linha
        salvarArq.add(segmentacao.getEndereco());
        //Na segunda linha ficam as conficurações de segmentação ("blurLevel", "colorRadius" e "minSize" respectivamente)
        salvarArq.add(aux);
        Map<Integer,String> regioesPraSalvar = anotacao.getHashRegioes();
        Set<Integer> chaves = regioesPraSalvar.keySet();
        for(Integer a: chaves){
            salvarArq.add(a.toString() + "\t" + regioesPraSalvar.get(a));
        }
                        
        arquivo.salvarArquivo(salvarArq, caminhoArq);
        
        JOptionPane.showMessageDialog(rootPane, "Salvo com sucesso.");
        //tornar o botão Salvar Alterações, Invisível.
        jButtonSalvarAlteracoes.setEnabled(false);
    }//GEN-LAST:event_jButtonSalvarComoActionPerformed

    private void jButtonBuscaAnotacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscaAnotacoesActionPerformed
        String descricaoSelecionada = buscaAnotacoes.getText();
        buscaAnotacoes.setText("");
        //Se nao tiver nenhum item na lista de anotação, não há o que fazer
        if (descricaoSelecionada.isEmpty() || !segmentacao.estaSegmentada() || anotacao.getHashRegioes().isEmpty()){
            return;
        }
        //Retira todas as regiões selecionadas no momento
        regioesSelecionadas.clear();
        
        //Pega a lista de todas as regiões que possuem a descrição selecionada
        ArrayList<Integer> regioesDaBusca = busca.getRegioesComDescricao(descricaoSelecionada,anotacao.getHashRegioes());
        //Pega a imagem com as regiões do arraylist destacadas
        BufferedImage imagemComRegioesBuscadas = anotacao.getMapaImagemNovoBrilho(segmentacao, regioesDaBusca,false);
        labelSegmentacao.setIcon(new ImageIcon(imagemComRegioesBuscadas));
    }//GEN-LAST:event_jButtonBuscaAnotacoesActionPerformed

    
    private void jSliderColorRadiusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderColorRadiusMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jSliderColorRadiusMouseClicked

    private void jSliderColorRadiusMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderColorRadiusMousePressed
        double valorJSlider = jSliderColorRadius.getValue();
        //De acordo com o valor que estiver em valorJslider, vai mudar o valor de ColorRadius
        //segmentacao.setColor_Radius(valorJSlider);
        colorRadius.setText(Double.toString(valorJSlider));
    }//GEN-LAST:event_jSliderColorRadiusMousePressed

    private void jSliderMinSizeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderMinSizeMousePressed
        double valorJSlider = jSliderMinSize.getValue();
        //De acordo com o valor que estiver em valorJslider, vai mudar o valor de ColorRadius
        //segmentacao.setMin_Size(valorJSlider);
        minSize.setText(Double.toString(valorJSlider));        
    }//GEN-LAST:event_jSliderMinSizeMousePressed

    private void jSliderBlurLevelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSliderBlurLevelFocusGained
       double valorJSlider = jSliderBlurLevel.getValue()/10.0;
       //De acordo com o valor que estiver em valorJslider, vai mudar o valor de BlurLevel
       //segmentacao.setBlur_Level(valorJSlider);
       blurLevel.setText(Double.toString(valorJSlider));
    }//GEN-LAST:event_jSliderBlurLevelFocusGained

    private void listaAnotacoesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_listaAnotacoesFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_listaAnotacoesFocusGained

    /**
     * Destaca a região da lista de anotações que foi clicada
     * @param evt 
     */
    private void listaAnotacoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaAnotacoesMouseClicked
        //Se nao tiver nenhum item na lista de anotação, não há o que fazer
        if (listaModelsAnotacao.getListaModels().isEmpty()){
            return;
        }
        //Retira todas as regiões selecionadas no momento
        regioesSelecionadas.clear();
        //Pega a descrição da região que o usuário clicou
        String descricaoSelecionada = (String) listaAnotacoes.getSelectedValue();
        //Pega a lista de todas as regiões que possuem a descrição selecionada
        ArrayList<Integer> regioesDaAnotacao = busca.getRegioesComDescricao(descricaoSelecionada,anotacao.getHashRegioes());
        //Pega a imagem com as regiões do arraylist destacadas
        BufferedImage imagemComRegioesAnotadas = anotacao.getMapaImagemNovoBrilho(segmentacao, regioesDaAnotacao,false);
        labelSegmentacao.setIcon(new ImageIcon(imagemComRegioesAnotadas));
    }//GEN-LAST:event_listaAnotacoesMouseClicked

    /**
     * Exibe todos os resultados em tempo real conforme usuário digita sua pesquisa
     * @param evt 
     */
    private void buscaAnotacoesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscaAnotacoesKeyReleased
        //Pega o que o usuário digitou até o momento para a busca
        String digitado = buscaAnotacoes.getText();
        //Busca todas as descrições que começam com o texto digitado
        ArrayList<String> resultados = busca.getDescricoesComInicio(digitado, anotacao.getHashRegioes());
        listaModelsBusca.clearListaModels();
        listaModelsBusca.addListaModels(resultados);
        //Coloca todas as descrições na lista de resultados em tempo real
        listInstantSearch.setModel(listaModelsBusca.getListaModels());
        //Se o arraylist não estiver vazio, deve mostrar al ista de resultados
        if (!resultados.isEmpty()){
            listInstantSearch.setVisible(true);
        }
        else{
            listInstantSearch.setVisible(false);
        }
    }//GEN-LAST:event_buscaAnotacoesKeyReleased

    private void blurLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blurLevelActionPerformed
    
    /**
     * Selecionar um resultado iterativo de busca
     * @param evt 
     */
    private void listInstantSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listInstantSearchMouseClicked
        //Guarda a descrição que o usuário selecionou
        String descricaoClicada = (String) listInstantSearch.getSelectedValue();
        //Insere o nome da descrição no campo de busca
        buscaAnotacoes.setText(descricaoClicada);
        //Limpa a lista de resultados iterativos de busca
        listaModelsBusca.clearListaModels();
        listInstantSearch.setVisible(false);
    }//GEN-LAST:event_listInstantSearchMouseClicked

    /**
     * Remover anotação selecionada
     * @param evt 
     */
    private void jButtonRemoverAnotacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoverAnotacaoActionPerformed
        if (listaModelsAnotacao.getListaModels().isEmpty() || listaAnotacoes.isSelectionEmpty()){
            return;
        }
       
        String descricao = (String)listaAnotacoes.getSelectedValue();
        anotacao.removerAnotacaoDaHash(descricao);
        listaModelsAnotacao.removeListaModels(descricao);
        labelSegmentacao.setIcon(new ImageIcon(segmentacao.getImagemSegmentada()));
        if(projetoAberto){
            jButtonSalvarAlteracoes.setEnabled(true);
        }
        
        if (anotacao.getHashRegioes().isEmpty()){
            labelRegioesSeparadas.setIcon(null);
        }
    }//GEN-LAST:event_jButtonRemoverAnotacaoActionPerformed

    private void jSliderBlurLevelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderBlurLevelMouseReleased
        double valorJSlider = jSliderBlurLevel.getValue()/10.0;
        //De acordo com o valor que estiver em valorJslider, vai mudar o valor de BlurLevel
        //segmentacao.setBlur_Level(valorJSlider);
        blurLevel.setText(Double.toString(valorJSlider));
    }//GEN-LAST:event_jSliderBlurLevelMouseReleased

    private void jSliderColorRadiusMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderColorRadiusMouseReleased
        double valorJSlider = jSliderColorRadius.getValue();
        //De acordo com o valor que estiver em valorJslider, vai mudar o valor de ColorRadius
        //segmentacao.setColor_Radius(valorJSlider);
        colorRadius.setText(Double.toString(valorJSlider));
    }//GEN-LAST:event_jSliderColorRadiusMouseReleased
/**
 * Abrir projeto, fazendo a leitura do arquivo, e depois adicionando nos campos do jFrame.
 * @param evt 
 */
    private void jRadioButtonMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem1ActionPerformed
        // TODO add your handling code here:
        chooserOpen = new JFileChooser();
        //Se não carregou o arquivo, não tem o que fazer
        if (chooserOpen.showOpenDialog(null) != JFileChooser.APPROVE_OPTION){
            return;
        }
        if (!arquivo.ehProjeto(chooserOpen.getSelectedFile().toString())){
            JOptionPane.showMessageDialog(rootPane, "O arquivo não é uma extensão do projeto.");            
            return;
        }
        arquivo.lerArquivo(chooserOpen.getSelectedFile().toString());
        projetoAberto = true; //comando utilizado para abilitar o botão de salvar alterações
        //setando valores nos campos de texto
        blurLevel.setText(Double.toString(arquivo.getBlurLevel()));
        colorRadius.setText(Double.toString(arquivo.getColorRadius()));
        minSize.setText(Double.toString(arquivo.getMinSize()));
        //setando valores nos jSliders
        jSliderBlurLevel.setValue((int)(arquivo.getBlurLevel()*10));
        jSliderColorRadius.setValue((int)arquivo.getColorRadius());
        jSliderMinSize.setValue((int)arquivo.getMinSize());
        //Insere a imagem no label da esquerda do programa
        labelSegmentacao.setIcon(new ImageIcon(arquivo.getCaminhoImagem()));
        //Limpa o label de mapa de rótulo
        labelMapaDeRotulo.setIcon(null);
        //Limpa a instancia de imagem, para carregar corretamente a nova
        segmentacao.resetaImagem();
        //Limpa as seleções anteriores
        regioesSelecionadas.clear();
        
        //Limpa as anotações de uma possível imagem anterior
        listaModelsAnotacao.clearListaModels();
        listaAnotacoes.setModel(listaModelsAnotacao.getListaModels());
        
        //Salva o endereço da imagem
        segmentacao.setEndereco(arquivo.getCaminhoImagem());   

        //Se a imagem não foi segmentada ainda, ou se os parâmetros foram alterados, deve segmentar a imagem
        if (segmentacao.estaModificado(arquivo.getBlurLevel(),arquivo.getColorRadius(),arquivo.getMinSize()) || segmentacao.getImagem() == null){
            segmentacao.segmentarImagem();
            jLabel6.setText(Integer.toString(segmentacao.getNumeroDeRegioes()));
        }
        //segmentando imagem com os parâmetro de segmentação lidos do arquivo
        labelSegmentacao.setIcon(new ImageIcon(segmentacao.getImagemSegmentada()));
        labelMapaDeRotulo.setIcon(new ImageIcon(segmentacao.getImagemMapaRotulo()));
        anotacao.setHashRegioes(arquivo.getDesceicaodoArquivo());
        //------  adicionando descrições na lista de anotações ---------
        String descricao = null;
        Set<Integer> chaves = arquivo.getDesceicaodoArquivo().keySet();
        Iterator<Integer> it = chaves.iterator();
        Integer key;
        while (it.hasNext()){
             key = it.next();
             descricao = arquivo.getDesceicaodoArquivo().get(key);
             if (!listaModelsAnotacao.contains(descricao)){
                 listaModelsAnotacao.addListaModels(descricao);
             }
        }
        if (!anotacao.getHashRegioes().isEmpty()){
            imagemComRegioes = anotacao.getImagemComRegioesAnotadas(segmentacao);
            labelRegioesSeparadas.setIcon(new ImageIcon(imagemComRegioes));
        }
    }//GEN-LAST:event_jRadioButtonMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jRadioButtonMenuItem1ActionPerformed(evt);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonSalvarAlteracoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarAlteracoesActionPerformed
        // TODO add your handling code here:
        ArrayList<String> salvarArq = new ArrayList<>();
        String caminhoArq = chooserOpen.getSelectedFile().toString();
        String aux = blurLevel.getText() +  "\t" + colorRadius.getText() + "\t" + minSize.getText();
        //Adiciona o endereço da imagem na primeira linha
        salvarArq.add(segmentacao.getEndereco());
        //Na segunda linha ficam as conficurações de segmentação ("blurLevel", "colorRadius" e "minSize" respectivamente)
        salvarArq.add(aux);
        Map<Integer,String> regioesPraSalvar = anotacao.getHashRegioes();
        Set<Integer> chaves = regioesPraSalvar.keySet();
        for(Integer a: chaves){
            salvarArq.add(a.toString() + "\t" + regioesPraSalvar.get(a));
        }
                        
        arquivo.salvarArquivo(salvarArq, caminhoArq);
        jButtonSalvarAlteracoes.setEnabled(false);
        JOptionPane.showMessageDialog(rootPane, "Alterações salvas com sucesso.");
    }//GEN-LAST:event_jButtonSalvarAlteracoesActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (!segmentacao.estaSegmentada()){
            return;
        }
        listaAnotacoes.clearSelection();
        listInstantSearch.clearSelection();
        regioesSelecionadas.clear();
        labelSegmentacao.setIcon(new ImageIcon (segmentacao.getImagemSegmentada()));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonSalvarNovaImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarNovaImagemActionPerformed
        File outputfile = new File(segmentacao.getNomeArquivo() + "_regioes_anotadas.jpg");
        try {
            ImageIO.write(anotacao.getMapaImagemNovoBrilho(segmentacao, anotacao.getRegioesAnotadas(), true), "jpg", outputfile);
        } catch (IOException ex) {
            Logger.getLogger(JImageFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Houve um problema ao salvar a imagem.");
        }
    }//GEN-LAST:event_jButtonSalvarNovaImagemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        dispose();
    }//GEN-LAST:event_formWindowClosed
      
    /**
     * Função que pega o texto digitado pelo usuário para converter em double
     * @param texto
     * @return o número digitado pelo usuário
     * @throws IllegalArgumentException 
     */
    private double getDouble(String texto) throws IllegalArgumentException {
        //Caso o usuário confunda e digite vírgula ao invés de ponto, esse método corrige
        String textoAtualizado = texto.replace(",", ".");
        StringNumeral numeroDigitado = new StringNumeral(textoAtualizado);
        //Se não tiver texto ou o texto tiver caracteres (letras ou outros símbolos, fora o ponto)
        //Lança exceção, pois o texto está inadequado para ser passado para double
        if (numeroDigitado.isEmpty() || numeroDigitado.temCaracter())
            throw new IllegalArgumentException("O texto digitado é inválido");
        
        //Se chegar aqui, o texto pode ser passado para double
        double number = Double.parseDouble(textoAtualizado);
        return number;
    }
        
    private Arquivo arquivo; //para salvar ou abrir arquivos
    private boolean projetoAberto; //usado em comparações para ativar o botão de salvar alterações
    private Segmentacao segmentacao;
    private Anotacao anotacao;
    private Busca busca;
    private ListaModels listaModelsAnotacao;
    private ListaModels listaModelsBusca;
    //private ArvoreBinaria arvore;
    private ArrayList<Integer> regioesSelecionadas;
    JFileChooser chooserOpen;
    JFileChooser chooserSave;
    BufferedImage imagemComRegioes;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField blurLevel;
    private javax.swing.JButton botaoNovaAnotacao;
    private javax.swing.JTextField buscaAnotacoes;
    private javax.swing.JTextField colorRadius;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonBuscaAnotacoes;
    private javax.swing.JButton jButtonRemoverAnotacao;
    private javax.swing.JButton jButtonSalvarAlteracoes;
    private javax.swing.JButton jButtonSalvarComo;
    private javax.swing.JButton jButtonSalvarNovaImagem;
    private javax.swing.JButton jButtonSegmt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemCarregar;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelAnotacao;
    private javax.swing.JPanel jPanelAnotacao1;
    private javax.swing.JPanel jPanelSelecSegmentacao;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPaneImagem;
    private javax.swing.JSlider jSliderBlurLevel;
    private javax.swing.JSlider jSliderColorRadius;
    private javax.swing.JSlider jSliderMinSize;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPaneSegmentacao;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel labelMapaDeRotulo;
    private javax.swing.JLabel labelRegioesSeparadas;
    private javax.swing.JLabel labelSegmentacao;
    private javax.swing.JList listInstantSearch;
    private javax.swing.JList listaAnotacoes;
    private javax.swing.JMenu menuAjuda;
    private javax.swing.JTextField minSize;
    private javax.swing.JTextField novaAnotacao;
    private javax.swing.JLabel regioes;
    // End of variables declaration//GEN-END:variables
}
